enum class Banks {
    SBI,HDFC,Canara,Union,Punjab
}

class BankAccount(val account_number: String, val bank: Banks) {
    private var balance: Double = 0.0

    fun getBalance(): Double {
        return balance
    }

    fun deposit(amount: Double) {
        if (amount > 0) {
            balance += amount
            println("Deposited: $amount. Updated balance: $balance")
        } else {
            println("Enter a valid amount to deposit.")
        }
    }

    fun withdraw(amount: Double) {
        if (amount > 0 && amount <= balance) {
            balance -= amount
            println("Withdrawn: $amount. Updated balance: $balance")
        } else if (amount > balance) {
            println("Insufficient funds. Current balance: $balance")
        } else {
            println("Enter a valid amount to withdraw.")
        }
    }
}


// here i am combining the instance if bank account or object with the password generated by the user
// and the mapping between the bankaccount(object) and the password is sealed or private

class BankAccountManager {
    private val accounts = mutableMapOf<String, Pair<BankAccount, String>>()

    fun generateAccountNumber(bank: Banks): String {
        return "${bank.name}_${System.currentTimeMillis()}"
    }

    fun createAccount(accountNumber: String, bank: Banks, password: String): BankAccount {
        val account = BankAccount(accountNumber, bank)
        accounts[accountNumber] = Pair(account, password)
        println("Account created successfully for $accountNumber at $bank.")
        return account
    }

    fun getAccount(accountNumber: String, password: String) {
        val account = accounts[accountNumber]
        if (account != null && account.second == password) {
            val acc = account.first
            println("Account Number: $accountNumber\nBank: ${acc.bank}\nCurrent balance: ${acc.getBalance()}")
        } else {
            println("Account not found or password incorrect.")
        }
    }

    fun deleteAccount(accountNumber: String, password: String) {
        val account = accounts[accountNumber]
        if (account != null && account.second == password) {
            accounts.remove(accountNumber)
            println("Account $accountNumber deleted successfully.")
        } else {
            println("Account not found or password incorrect.")
        }
    }

    fun changeBank(accountNumber: String, newBank: Banks, password: String) {
        val accountPair = accounts[accountNumber]
        if (accountPair != null && accountPair.second == password) {
            val oldAccount = accountPair.first
            val newAccountNumber = generateAccountNumber(newBank)
            val updatedAccount = BankAccount(newAccountNumber, newBank)
            updatedAccount.deposit(oldAccount.getBalance())
            accounts.remove(accountNumber)
            accounts[newAccountNumber] = Pair(updatedAccount, password)
            println("Bank changed successfully. New Account Number: $newAccountNumber, Bank: $newBank")
        } else {
            println("Account not found or password incorrect.")
        }
    }

    fun deposit(accountNumber: String, password: String, amount: Double) {
        val account = accounts[accountNumber]
        if (account != null && account.second == password) {
            account.first.deposit(amount)
        } else {
            println("Account not found or password incorrect.")
        }
    }

    fun withdraw(accountNumber: String, password: String, amount: Double) {
        val account = accounts[accountNumber]
        if (account != null && account.second == password) {
            account.first.withdraw(amount)
        } else {
            println("Account not found or password incorrect.")
        }
    }
}
